/*******************************************************************************************
*  This class is autogenerated from the class ActorLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace FG.ServiceFabric.Tests.EventStoredActor
{
	internal sealed partial class EventSource
	{

		private const int FailedToSendMessageEventId = 1001;

		[Event(FailedToSendMessageEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Actor)]
		private void FailedToSendMessage(
			string actorId, 
			string serviceUri, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToSendMessageEventId, 
				actorId, 
				serviceUri, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToSendMessage(
			Microsoft.ServiceFabric.Actors.ActorId actorId, 
			System.Uri serviceUri, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToSendMessage(
					actorId.ToString(), 
					serviceUri.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int MessageSentEventId = 2002;

		[Event(MessageSentEventId, Level = EventLevel.LogAlways, Message = "Message Sent {0} {1} {2}", Keywords = Keywords.Actor)]
		private void MessageSent(
			string actorId, 
			string serviceUri, 
			string messageType)
		{
			WriteEvent(
				MessageSentEventId, 
				actorId, 
				serviceUri, 
				messageType);
		}

		[NonEvent]
		public void MessageSent(
			Microsoft.ServiceFabric.Actors.ActorId actorId, 
			System.Uri serviceUri, 
			string messageType)
		{
			if (this.IsEnabled())
			{
				MessageSent(
					actorId.ToString(), 
					serviceUri.ToString(), 
					messageType);
			}
		}


		private const int MovedToDeadLettersEventId = 3003;

		[Event(MovedToDeadLettersEventId, Level = EventLevel.LogAlways, Message = "Moved To Dead Letters {0}", Keywords = Keywords.Actor)]
		public void MovedToDeadLetters(
			int depth)
		{
			WriteEvent(
				MovedToDeadLettersEventId, 
				depth);
		}


	}
}