/*******************************************************************************************
*  This class is autogenerated from the class DocumentDbStateSessionManagerLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;


namespace FG.ServiceFabric.Services.Runtime.StateSession.CosmosDb.Diagnostics
{
	internal sealed partial class FGServiceFabricPersistenceEventSource
	{

		private const int StartingManagerEventId = 1001;

		[Event(StartingManagerEventId, Level = EventLevel.LogAlways, Message = "Starting Manager {1} {2} {3} {4} {5} {6}", Keywords = Keywords.DocumentDbStateSessionManager)]
		public void StartingManager(
			string managerInstance, 
			string serviceName, 
			Guid partitionId, 
			string partitionKey, 
			string endpointUri, 
			string databaseName, 
			string collection)
		{
			WriteEvent(
				StartingManagerEventId, 
				managerInstance, 
				serviceName, 
				partitionId, 
				partitionKey, 
				endpointUri, 
				databaseName, 
				collection);
		}


		private const int CreatingCollectionEventId = 1002;

		[Event(CreatingCollectionEventId, Level = EventLevel.LogAlways, Message = "Creating Collection {1}", Keywords = Keywords.DocumentDbStateSessionManager)]
		public void CreatingCollection(
			string managerInstance, 
			string collectionName)
		{
			WriteEvent(
				CreatingCollectionEventId, 
				managerInstance, 
				collectionName);
		}


		private const int CreatingClientEventId = 1003;

		[Event(CreatingClientEventId, Level = EventLevel.LogAlways, Message = "Creating Client", Keywords = Keywords.DocumentDbStateSessionManager)]
		public void CreatingClient(
			string managerInstance)
		{
			WriteEvent(
				CreatingClientEventId, 
				managerInstance);
		}


		private const int CreatingSessionEventId = 1004;

		[Event(CreatingSessionEventId, Level = EventLevel.LogAlways, Message = "Creating Session", Keywords = Keywords.DocumentDbStateSessionManager)]
		public void CreatingSession(
			string managerInstance)
		{
			WriteEvent(
				CreatingSessionEventId, 
				managerInstance);
		}


		private const int ContainsInternalDocumentDbFailedEventId = 1005;

		[Event(ContainsInternalDocumentDbFailedEventId, Level = EventLevel.LogAlways, Message = "Contains Internal Document Db Failed {1} {2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void ContainsInternalDocumentDbFailed(
			string managerInstance, 
			string id, 
			string dcex)
		{
			WriteEvent(
				ContainsInternalDocumentDbFailedEventId, 
				managerInstance, 
				id, 
				dcex);
		}

		[NonEvent]
		public void ContainsInternalDocumentDbFailed(
			string managerInstance, 
			string id, 
			Microsoft.Azure.Documents.DocumentClientException dcex)
		{
			if (this.IsEnabled())
			{
				ContainsInternalDocumentDbFailed(
					managerInstance, 
					id, 
					(dcex).ToString());
			}
		}


		private const int ContainsInternalFailedEventId = 1006;

		[Event(ContainsInternalFailedEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void ContainsInternalFailed(
			string managerInstance, 
			string id, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ContainsInternalFailedEventId, 
				managerInstance, 
				id, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void ContainsInternalFailed(
			string managerInstance, 
			string id, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				ContainsInternalFailed(
					managerInstance, 
					id, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FindByKeyPrefixDocumenbtDbFailureEventId = 1007;

		[Event(FindByKeyPrefixDocumenbtDbFailureEventId, Level = EventLevel.LogAlways, Message = "Find By Key Prefix Documenbt Db Failure {1} {2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void FindByKeyPrefixDocumenbtDbFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			string dcex)
		{
			WriteEvent(
				FindByKeyPrefixDocumenbtDbFailureEventId, 
				managerInstance, 
				schemaKeyPrefix, 
				dcex);
		}

		[NonEvent]
		public void FindByKeyPrefixDocumenbtDbFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			Microsoft.Azure.Documents.DocumentClientException dcex)
		{
			if (this.IsEnabled())
			{
				FindByKeyPrefixDocumenbtDbFailure(
					managerInstance, 
					schemaKeyPrefix, 
					(dcex).ToString());
			}
		}


		private const int FindByKeyPrefixFailureEventId = 1008;

		[Event(FindByKeyPrefixFailureEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void FindByKeyPrefixFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FindByKeyPrefixFailureEventId, 
				managerInstance, 
				schemaKeyPrefix, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FindByKeyPrefixFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FindByKeyPrefixFailure(
					managerInstance, 
					schemaKeyPrefix, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumerateSchemaNamesDocumentDbFailureEventId = 1009;

		[Event(EnumerateSchemaNamesDocumentDbFailureEventId, Level = EventLevel.LogAlways, Message = "Enumerate Schema Names Document Db Failure {1} {2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void EnumerateSchemaNamesDocumentDbFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			string dcex)
		{
			WriteEvent(
				EnumerateSchemaNamesDocumentDbFailureEventId, 
				managerInstance, 
				schemaKeyPrefix, 
				dcex);
		}

		[NonEvent]
		public void EnumerateSchemaNamesDocumentDbFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			Microsoft.Azure.Documents.DocumentClientException dcex)
		{
			if (this.IsEnabled())
			{
				EnumerateSchemaNamesDocumentDbFailure(
					managerInstance, 
					schemaKeyPrefix, 
					(dcex).ToString());
			}
		}


		private const int EnumerateSchemaNamesFailureEventId = 1010;

		[Event(EnumerateSchemaNamesFailureEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.DocumentDbStateSessionManager)]
		private void EnumerateSchemaNamesFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				EnumerateSchemaNamesFailureEventId, 
				managerInstance, 
				schemaKeyPrefix, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void EnumerateSchemaNamesFailure(
			string managerInstance, 
			string schemaKeyPrefix, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				EnumerateSchemaNamesFailure(
					managerInstance, 
					schemaKeyPrefix, 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int DisposingSessionEventId = 1011;

		[Event(DisposingSessionEventId, Level = EventLevel.LogAlways, Message = "Disposing Session", Keywords = Keywords.DocumentDbStateSessionManager)]
		public void DisposingSession(
			string managerInstance)
		{
			WriteEvent(
				DisposingSessionEventId, 
				managerInstance);
		}


	}
}